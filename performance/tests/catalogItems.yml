execution:
  - concurreny: 1
    iterations: 20
    scenario: get-catalog-items
  - concurreny: 1
    iterations: 20
    scenario: get-catalog-items-csv
  - concurreny: 1
    iterations: 20
    scenario: get-catalog-item
  - concurreny: 1
    iterations: 20
    scenario: create-catalog-item

scenarios:
  get-user-token:
    requests:
      - url: ${__P(base-uri)}/api/oauth/token
        method: POST
        label: GetUserToken
        headers:
          Authorization: Basic ${__base64Encode(${__P(basic-auth)})}
        body:
          grant_type: password
          username: ${__P(username)}
          password: ${__P(password)}
        extract-jsonpath:
          access_token:
            jsonpath: $.access_token
  get-catalog-items:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems
        method: GET
        label: GetCatalogItems
        headers:
          Authorization: Bearer ${access_token}
  get-catalog-items-csv:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems?type=csv
        method: GET
        label: GetCatalogItemsCSV
        headers:
          Authorization: Bearer ${access_token}
  get-catalog-item:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems/94c6e021-0020-4af3-b789-306f2cd1dabb
        method: GET
        label: GetCatalogItem
        headers:
          Authorization: Bearer ${access_token}
  create-catalog-item:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems
        method: POST
        label: CreateCatalogItem
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput;

            log.error(prev.getResponseDataAsString());

            def random = new Random();

            def catalogItem = new LinkedHashMap([
              fromPqsCatalog: true,
              equipmentCode: random.nextInt() + "-" + random.nextInt(),
              type: "quisque porta volutpat",
              model: "Model" + random.nextInt(),
              manufacturer: "Manufacturer" + random.nextInt(),
              energySource: "NOT_APPLICABLE",
              dateOfPrequal: 1957,
              storageTemperature: "MINUS16",
              maxOperatingTemp: -24,
              minOperatingTemp: -43,
              energyConsumption: "3.01kW/day",
              holdoverTime: 45,
              grossVolume: 63,
              netVolume: 29,
              visibleInCatalog: false,
              archived: false
            ]);

            vars.put("catalog_item", JsonOutput.toJson(catalogItem));
        body: ${catalog_item}
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json

reporting:
    - module: passfail
      criteria:
      - p90 of GetCatalogItems>500ms
      - p90 of GetCatalogItemsCSV>500ms
      - p90 of GetCatalogItem>500ms
      - p90 of CreateCatalogItem>500ms
