execution:
  - concurrency: 1
    hold-for: ${__P(scenario-duration,60)}
    scenario: get-catalog-items
  - concurrency: 1
    hold-for: ${__P(scenario-duration,60)}
    scenario: get-catalog-items-csv
  - concurrency: 1
    hold-for: ${__P(scenario-duration,60)}
    scenario: get-catalog-item
  - concurrency: 1
    hold-for: ${__P(scenario-duration,60)}
    scenario: update-catalog-item
  - concurrency: 1
    hold-for: ${__P(scenario-duration,60)}
    scenario: upload-catalog-items

scenarios:
  get-catalog-items:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems
        method: GET
        label: GetCatalogItems
        headers:
          Authorization: Bearer ${access_token}
  get-catalog-items-csv:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems?type=csv
        method: GET
        label: GetCatalogItemsCSV
        headers:
          Authorization: Bearer ${access_token}
  create-catalog-item:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems
        method: POST
        label: CreateCatalogItem
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput;

            def random = new Random();

            def catalogItem = new LinkedHashMap([
              fromPqsCatalog: true,
              equipmentCode: random.nextInt() + "-" + random.nextInt(),
              type: "quisque porta volutpat",
              model: "Model" + random.nextInt(),
              manufacturer: "Manufacturer" + random.nextInt(),
              energySource: "NOT_APPLICABLE",
              dateOfPrequal: 1957,
              storageTemperature: "MINUS16",
              maxOperatingTemp: -24,
              minOperatingTemp: -43,
              energyConsumption: "3.01kW/day",
              holdoverTime: 45,
              grossVolume: 63,
              netVolume: 29,
              visibleInCatalog: false,
              archived: false
            ]);

            vars.put("catalog_item", JsonOutput.toJson(catalogItem));
        body: ${catalog_item}
        extract-jsonpath:
          catalog_item_id: $.id
  get-catalog-item:
    requests:
      - include-scenario: create-catalog-item
      - url: ${__P(base-uri)}/api/catalogItems/${catalog_item_id}
        method: GET
        label: GetCatalogItem
        headers:
          Authorization: Bearer ${access_token}
  update-catalog-item:
    requests:
      - include-scenario: create-catalog-item
      - url: ${__P(base-uri)}/api/catalogItems/${catalog_item_id}
        method: PUT
        label: UpdateCatalogItem
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonSlurper;
            import groovy.json.JsonOutput;

            def response = prev.getResponseDataAsString();

            def jsonSlurper = new JsonSlurper();
            def catalogItem = jsonSlurper.parseText(response);

            catalogItem.dateOfPrequal = 2019;

            vars.put("catalog_item", JsonOutput.toJson(catalogItem));
        body: ${catalog_item}
  upload-catalog-items:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/catalogItems?format=csv
        method: POST
        label: UploadCatalogItems
        headers:
          Authorization: Bearer ${access_token}
        jsr223:
          execute: before
          script-text: |
            def suffix = vars.get("catalog_item_suffix");

            if (suffix == null) {
              suffix = 1;
            } else {
              suffix = suffix.toInteger();
            }

            def csvContent = "From PQS catalog,PQS equipment code,Type,Model,Manufacturer,Energy " +
              "source,Date of prequal,Storage temperature,Max operating temp (degrees C),Min " +
              "operating temp (degrees C),Energy consumption (NA for solar),Holdover time (hours)" +
              ",Gross volume,Net volume,Dimensions,Visible in catalog,Archived";

            (1..1000).each {
              csvContent += "\nY,";
              csvContent += suffix + ",";
              csvContent += "Gas,";
              csvContent += suffix + ",";
              csvContent += suffix + ",";
              csvContent += "GASOLINE,2007,MINUS5,43,5,3.50kW/day,4,,24,,Y,N";
              suffix++;
            }

            vars.put("catalog_item_suffix", suffix.toString());
            new File("/tmp/artifacts/catalog_items.csv").write(csvContent);
        upload-files:
          - param: file
            path: /tmp/artifacts/catalog_items.csv

reporting:
    - module: passfail
      criteria:
        Get Catalog Items too slow: p90 of GetCatalogItems>750ms
        Get Catalog Items as CSV too slow: p90 of GetCatalogItemsCSV>500ms
        Get Catalog Item too slow: p90 of GetCatalogItem>500ms
        Create Catalog Item too slow: p90 of CreateCatalogItem>500ms
        Update Catalog Item too slow: p90 of UpdateCatalogItem>500ms
        Upload Catalog Items too slow: p90 of UploadCatalogItems>3000ms
